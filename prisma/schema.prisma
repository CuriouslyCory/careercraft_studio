// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Enums
enum EducationType {
    HIGH_SCHOOL
    GED
    ASSOCIATES
    BACHELORS
    MASTERS
    DOCTORATE
    CERTIFICATION
    OTHER
}

enum UserDetailCategory {
    MOTIVATION
    INTEREST
    CAREER_GOAL
    STRENGTH
    WEAKNESS
    WORK_PREFERENCE
    OTHER
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
    TOOL
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? // Example field for some providers

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    documents       Document[]
    workHistories   WorkHistory[]
    educations      Education[]
    keyAchievements KeyAchievement[]
    userDetails     UserDetail[]
    jobPostings     JobPosting[]
    chatMessages    ChatMessage[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ChatMessage {
    id        String      @id @default(cuid())
    role      MessageRole
    content   String      @db.Text
    createdAt DateTime    @default(now())
    metadata  Json? // For storing additional metadata (e.g., agent info, tool calls)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    // For conversation threading
    conversationId String?

    @@index([userId])
    @@index([conversationId])
}

model Document {
    id        String   @id @default(cuid())
    title     String // Auto-generated based on content or user input
    content   String // Stores the full extracted text of the document
    type      String // e.g., 'resume', 'cover_letter', 'article', 'blog_post', etc.
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model WorkHistory {
    id          String    @id @default(cuid())
    companyName String
    jobTitle    String
    startDate   DateTime
    endDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    achievements WorkAchievement[]
    skills       WorkSkill[]

    @@index([userId])
}

model WorkAchievement {
    id          String   @id @default(cuid())
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    workHistory   WorkHistory @relation(fields: [workHistoryId], references: [id], onDelete: Cascade)
    workHistoryId String

    @@index([workHistoryId])
}

model WorkSkill {
    id        String   @id @default(cuid())
    name      String // e.g., "React", "Project Management"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workHistory   WorkHistory @relation(fields: [workHistoryId], references: [id], onDelete: Cascade)
    workHistoryId String

    @@index([workHistoryId])
}

model Education {
    id               String        @id @default(cuid())
    type             EducationType
    institutionName  String
    degreeOrCertName String? // e.g., "B.S. Computer Science", "CompTIA A+"
    description      String // For additional details
    dateCompleted    DateTime?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model KeyAchievement {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model UserDetail {
    id        String             @id @default(cuid())
    category  UserDetailCategory
    content   String
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model JobPosting {
    id          String   @id @default(cuid())
    title       String
    description String
    company     String
    location    String
    url         String?
    status      String?
    notes       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}
