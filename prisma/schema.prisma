// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Enums
enum EducationType {
    HIGH_SCHOOL
    GED
    ASSOCIATES
    BACHELORS
    MASTERS
    DOCTORATE
    CERTIFICATION
    CONTINUOUS_PROFESSIONAL_DEVELOPMENT
    OTHER
}

enum UserDetailCategory {
    MOTIVATION
    INTEREST
    CAREER_GOAL
    STRENGTH
    WEAKNESS
    WORK_PREFERENCE
    OTHER
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
    TOOL
}

enum SkillCategory {
    // Technology & Engineering
    PROGRAMMING_LANGUAGE
    FRAMEWORK_LIBRARY
    DATABASE
    CLOUD_PLATFORM
    DEVOPS_TOOLS
    DESIGN_TOOLS

    // Healthcare & Medical
    MEDICAL_PROCEDURE
    MEDICAL_EQUIPMENT
    DIAGNOSTIC_SKILLS
    PATIENT_CARE
    MEDICAL_SOFTWARE

    // Finance & Business
    FINANCIAL_ANALYSIS
    ACCOUNTING_SOFTWARE
    TRADING_PLATFORMS
    REGULATORY_COMPLIANCE
    RISK_MANAGEMENT

    // Legal
    LEGAL_RESEARCH
    LEGAL_SOFTWARE
    CASE_MANAGEMENT
    LITIGATION_SKILLS
    CONTRACT_LAW

    // Manufacturing & Operations
    MANUFACTURING_EQUIPMENT
    QUALITY_CONTROL
    SUPPLY_CHAIN
    LEAN_METHODOLOGY
    SAFETY_PROTOCOLS

    // Sales & Marketing
    CRM_SYSTEMS
    DIGITAL_MARKETING
    SALES_TECHNIQUES
    MARKET_RESEARCH
    CONTENT_CREATION

    // Education & Training
    CURRICULUM_DEVELOPMENT
    EDUCATIONAL_TECHNOLOGY
    ASSESSMENT_METHODS
    CLASSROOM_MANAGEMENT
    LEARNING_MANAGEMENT_SYSTEMS

    // Creative & Media
    GRAPHIC_DESIGN_SOFTWARE
    VIDEO_EDITING
    AUDIO_PRODUCTION
    CREATIVE_WRITING
    PHOTOGRAPHY_EQUIPMENT

    // Universal Categories
    PROJECT_MANAGEMENT
    SOFT_SKILLS
    INDUSTRY_KNOWLEDGE
    CERTIFICATION
    METHODOLOGY
    LANGUAGES
    OTHER
}

enum ProficiencyLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    EXPERT
}

enum SkillSource {
    WORK_EXPERIENCE
    EDUCATION
    CERTIFICATION
    PERSONAL_PROJECT
    TRAINING
    OTHER
}

enum ExperienceCategory {
    TECHNICAL
    MANAGEMENT
    LEADERSHIP
    INDUSTRY
    GENERAL
}

enum EducationLevel {
    HIGH_SCHOOL
    ASSOCIATES
    BACHELORS
    MASTERS
    DOCTORATE
    CERTIFICATION
    BOOTCAMP
    COURSE
}

enum SubscriptionTierType {
    FREE
    PRO
    ENTERPRISE // For future expansion
}

enum SubscriptionTierStatus {
    ACTIVE
    COMING_SOON
    DISABLED
}

enum SubscriptionStatus {
    ACTIVE
    CANCELED
    EXPIRED
    PAST_DUE
    INCOMPLETE
    TRIALING
}

enum UsageActionType {
    RESUME_UPLOAD
    JOB_POSTING_IMPORT
    RESUME_GENERATION
    COVER_LETTER_GENERATION
    AI_CHAT_MESSAGE // For future usage tracking
    DOCUMENT_EXPORT // For future usage tracking
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? // Example field for some providers

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    documents       Document[]
    workHistories   WorkHistory[]
    educations      Education[]
    keyAchievements KeyAchievement[]
    userDetails     UserDetail[]
    jobPostings     JobPosting[]
    chatMessages    ChatMessage[]
    chatDetails     ChatDetails[]
    userSkills      UserSkill[]
    userLinks       UserLink[]
    subscription    Subscription?
    usageRecords    UsageRecord[]
    userProfile     UserProfile?
}

model UserProfile {
    id        String   @id @default(cuid())
    firstName String? // Professional first name
    lastName  String? // Professional last name
    email     String? // Preferred professional email
    phone     String? // Phone number
    location  String? // City, State or City, Country
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Skill taxonomy and normalization models
model Skill {
    id          String        @id @default(cuid())
    name        String        @unique // Canonical name (e.g., "React")
    category    SkillCategory
    description String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    aliases         SkillAlias[]
    similarSkills   SkillSimilarity[]     @relation("SkillSimilarities")
    relatedToSkills SkillSimilarity[]     @relation("RelatedSkillSimilarities")
    userSkills      UserSkill[]
    jobRequirements JobSkillRequirement[]

    @@index([category])
}

model SkillAlias {
    id      String @id @default(cuid())
    alias   String @unique // Alternative names (e.g., "ReactJS", "React.js")
    skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId String

    @@index([skillId])
}

model SkillSimilarity {
    id              String @id @default(cuid())
    similarityScore Float  @default(0.8) // 0.0 to 1.0, how similar the skills are

    skill          Skill  @relation("SkillSimilarities", fields: [skillId], references: [id], onDelete: Cascade)
    skillId        String
    relatedSkill   Skill  @relation("RelatedSkillSimilarities", fields: [relatedSkillId], references: [id], onDelete: Cascade)
    relatedSkillId String

    @@unique([skillId, relatedSkillId])
}

// User skill tracking
model UserSkill {
    id              String           @id @default(cuid())
    proficiency     ProficiencyLevel
    yearsExperience Float? // Can be fractional (e.g., 1.5 years)
    source          SkillSource
    notes           String? // Where/how they learned it
    isVerified      Boolean          @default(false) // Could be verified through assessments
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt

    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId String

    // Optional linkage to work history if skill was gained from work
    workHistory   WorkHistory? @relation(fields: [workHistoryId], references: [id], onDelete: SetNull)
    workHistoryId String?

    @@unique([userId, skillId])
    @@index([userId])
    @@index([skillId])
}

// Normalized experience requirements
model ExperienceRequirement {
    id          String             @id @default(cuid())
    years       Float? // Number of years required
    description String // Text description of the requirement
    category    ExperienceCategory
    isRequired  Boolean            @default(true) // true for required, false for bonus
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String

    @@index([jobPostingId])
}

// Normalized job skill requirements
model JobSkillRequirement {
    id            String            @id @default(cuid())
    isRequired    Boolean           @default(true) // true for required, false for bonus
    minimumLevel  ProficiencyLevel? // Minimum proficiency required
    yearsRequired Float? // Years of experience required
    priority      Int               @default(1) // 1 = high, 2 = medium, 3 = low
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId      String
    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String

    @@unique([skillId, jobPostingId])
    @@index([jobPostingId])
    @@index([skillId])
}

// Normalized education requirements
model EducationRequirement {
    id          String         @id @default(cuid())
    level       EducationLevel
    field       String? // Field of study (e.g., "Computer Science")
    description String? // Additional details
    isRequired  Boolean        @default(true) // true for required, false for bonus
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String

    @@index([jobPostingId])
}

model ChatDetails {
    id             String   @id @default(cuid())
    conversationId String   @unique
    name           String   @default("New Conversation")
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    messages ChatMessage[]

    @@index([userId])
    @@index([conversationId])
}

model ChatMessage {
    id        String      @id @default(cuid())
    role      MessageRole
    content   String      @db.Text
    createdAt DateTime    @default(now())
    metadata  Json? // For storing additional metadata (e.g., agent info, tool calls)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    // For conversation threading
    conversationId String?
    chatDetails    ChatDetails? @relation(fields: [conversationId], references: [conversationId], onDelete: Cascade)

    @@index([userId])
    @@index([conversationId])
}

model Document {
    id        String   @id @default(cuid())
    title     String // Auto-generated based on content or user input
    content   String // Stores the full extracted text of the document
    type      String // e.g., 'resume', 'cover_letter', 'article', 'blog_post', etc.
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model WorkHistory {
    id          String    @id @default(cuid())
    companyName String
    jobTitle    String
    startDate   DateTime
    endDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    achievements WorkAchievement[]
    userSkills   UserSkill[]

    @@index([userId])
}

model WorkAchievement {
    id          String   @id @default(cuid())
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    workHistory   WorkHistory @relation(fields: [workHistoryId], references: [id], onDelete: Cascade)
    workHistoryId String

    @@index([workHistoryId])
}

model Education {
    id               String        @id @default(cuid())
    type             EducationType
    institutionName  String
    degreeOrCertName String? // e.g., "B.S. Computer Science", "CompTIA A+"
    description      String? // For additional details (optional)
    dateCompleted    DateTime?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model KeyAchievement {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model UserDetail {
    id        String             @id @default(cuid())
    category  UserDetailCategory
    content   String
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model UserLink {
    id        String   @id @default(cuid())
    title     String // e.g., "LinkedIn", "Personal Website", "GitHub"
    url       String // The actual URL
    type      String   @default("OTHER") // e.g., "LINKEDIN", "GITHUB", "PORTFOLIO", "PERSONAL_WEBSITE", "OTHER"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([userId, url]) // Prevent duplicate URLs per user
    @@index([userId])
}

model JobPosting {
    id        String   @id @default(cuid())
    title     String
    content   String   @db.Text // Changed from description to content, using Text for longer content
    company   String
    location  String
    industry  String? // New field for industry
    url       String?
    status    String?
    notes     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                 String
    details                JobPostingDetails?
    document               JobPostDocument?
    experienceRequirements ExperienceRequirement[]
    skillRequirements      JobSkillRequirement[]
    educationRequirements  EducationRequirement[]

    @@index([userId])
}

model JobPostingDetails {
    id String @id @default(cuid())

    // Structured requirements for compatibility analysis
    technicalSkills        String[] // Technical skills, languages, frameworks, tools
    softSkills             String[] // Communication, leadership, teamwork, etc.
    educationRequirements  String[] // Education, certifications, degrees, field of study
    experienceRequirements Json[] // Array of objects with years, description, category
    industryKnowledge      String[] // Industry-specific knowledge and expertise

    // Bonus/preferred structured requirements  
    bonusTechnicalSkills        String[] // Preferred technical skills
    bonusSoftSkills             String[] // Preferred soft skills
    bonusEducationRequirements  String[] // Preferred education and certifications
    bonusExperienceRequirements Json[] // Preferred experience requirements
    bonusIndustryKnowledge      String[] // Preferred industry knowledge

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String     @unique

    @@index([jobPostingId])
}

model JobPostDocument {
    id String @id @default(cuid())

    // Document content
    resumeContent      String? @db.Text // Generated resume content in markdown
    coverLetterContent String? @db.Text // Generated cover letter content in markdown

    // Metadata
    resumeGeneratedAt      DateTime? // When resume was last generated
    coverLetterGeneratedAt DateTime? // When cover letter was last generated

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String     @unique

    @@index([jobPostingId])
}

// Subscription and Usage Tracking Models
model SubscriptionTier {
    id          String                 @id @default(cuid())
    name        String                 @unique // "Free", "Pro", "Enterprise"
    type        SubscriptionTierType
    status      SubscriptionTierStatus @default(ACTIVE)
    description String?

    // Monthly limits (null = unlimited)
    resumeUploadLimit     Int? // Free: 1, Pro: null (unlimited)
    jobPostingLimit       Int? // Free: 5, Pro: null (unlimited)
    resumeGenerationLimit Int? // Free: 5, Pro: null (unlimited)
    coverLetterLimit      Int? // Free: 5, Pro: null (unlimited)
    aiChatMessageLimit    Int? // Future: Free: 50, Pro: null (unlimited)

    // Pricing (in cents, for Stripe)
    monthlyPriceCents Int? // Free: null, Pro: 999 ($9.99)
    yearlyPriceCents  Int? // Free: null, Pro: 9999 ($99.99)

    // Stripe integration
    stripeMonthlyPriceId String? // Stripe price ID for monthly billing
    stripeYearlyPriceId  String? // Stripe price ID for yearly billing

    isActive  Boolean  @default(true) // Deprecated: use status instead
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subscriptions Subscription[]

    @@index([type])
    @@index([status])
    @@index([isActive])
}

model Subscription {
    id     String @id @default(cuid())
    userId String @unique

    // Subscription details
    tier   SubscriptionTier   @relation(fields: [tierId], references: [id])
    tierId String
    status SubscriptionStatus @default(ACTIVE)

    // Billing cycle
    currentPeriodStart DateTime
    currentPeriodEnd   DateTime
    cancelAtPeriodEnd  Boolean  @default(false)

    // Stripe integration
    stripeSubscriptionId String? @unique
    stripeCustomerId     String?
    stripePriceId        String? // Current price being charged

    // Metadata
    canceledAt DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([status])
    @@index([stripeSubscriptionId])
}

model UsageRecord {
    id     String          @id @default(cuid())
    userId String
    action UsageActionType

    // Tracking details
    timestamp DateTime @default(now())
    metadata  Json? // Additional context (e.g., job posting ID, document type)

    // Monthly tracking (for limit enforcement)
    year  Int // e.g., 2024
    month Int // 1-12

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([userId, action, year, month]) // Optimized for limit checking
    @@index([action, timestamp]) // For analytics
}
