// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Enums
enum EducationType {
    HIGH_SCHOOL
    GED
    ASSOCIATES
    BACHELORS
    MASTERS
    DOCTORATE
    CERTIFICATION
    OTHER
}

enum UserDetailCategory {
    MOTIVATION
    INTEREST
    CAREER_GOAL
    STRENGTH
    WEAKNESS
    WORK_PREFERENCE
    OTHER
}

enum MessageRole {
    USER
    ASSISTANT
    SYSTEM
    TOOL
}

enum SkillCategory {
    PROGRAMMING_LANGUAGE
    FRAMEWORK_LIBRARY
    DATABASE
    CLOUD_PLATFORM
    DEVOPS_TOOLS
    DESIGN_TOOLS
    PROJECT_MANAGEMENT
    SOFT_SKILLS
    INDUSTRY_KNOWLEDGE
    CERTIFICATION
    METHODOLOGY
    OTHER
}

enum ProficiencyLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    EXPERT
}

enum SkillSource {
    WORK_EXPERIENCE
    EDUCATION
    CERTIFICATION
    PERSONAL_PROJECT
    TRAINING
    OTHER
}

enum ExperienceCategory {
    TECHNICAL
    MANAGEMENT
    LEADERSHIP
    INDUSTRY
    GENERAL
}

enum EducationLevel {
    HIGH_SCHOOL
    ASSOCIATES
    BACHELORS
    MASTERS
    DOCTORATE
    CERTIFICATION
    BOOTCAMP
    COURSE
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? // Example field for some providers

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    documents       Document[]
    workHistories   WorkHistory[]
    educations      Education[]
    keyAchievements KeyAchievement[]
    userDetails     UserDetail[]
    jobPostings     JobPosting[]
    chatMessages    ChatMessage[]
    userSkills      UserSkill[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Skill taxonomy and normalization models
model Skill {
    id          String        @id @default(cuid())
    name        String        @unique // Canonical name (e.g., "React")
    category    SkillCategory
    description String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    aliases         SkillAlias[]
    similarSkills   SkillSimilarity[]     @relation("SkillSimilarities")
    relatedToSkills SkillSimilarity[]     @relation("RelatedSkillSimilarities")
    userSkills      UserSkill[]
    jobRequirements JobSkillRequirement[]

    @@index([category])
}

model SkillAlias {
    id      String @id @default(cuid())
    alias   String @unique // Alternative names (e.g., "ReactJS", "React.js")
    skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId String

    @@index([skillId])
}

model SkillSimilarity {
    id              String @id @default(cuid())
    similarityScore Float  @default(0.8) // 0.0 to 1.0, how similar the skills are

    skill          Skill  @relation("SkillSimilarities", fields: [skillId], references: [id], onDelete: Cascade)
    skillId        String
    relatedSkill   Skill  @relation("RelatedSkillSimilarities", fields: [relatedSkillId], references: [id], onDelete: Cascade)
    relatedSkillId String

    @@unique([skillId, relatedSkillId])
}

// User skill tracking
model UserSkill {
    id              String           @id @default(cuid())
    proficiency     ProficiencyLevel
    yearsExperience Float? // Can be fractional (e.g., 1.5 years)
    source          SkillSource
    notes           String? // Where/how they learned it
    isVerified      Boolean          @default(false) // Could be verified through assessments
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt

    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId String

    // Optional linkage to work history if skill was gained from work
    workHistory   WorkHistory? @relation(fields: [workHistoryId], references: [id], onDelete: SetNull)
    workHistoryId String?

    @@unique([userId, skillId])
    @@index([userId])
    @@index([skillId])
}

// Normalized experience requirements
model ExperienceRequirement {
    id          String             @id @default(cuid())
    years       Float? // Number of years required
    description String // Text description of the requirement
    category    ExperienceCategory
    isRequired  Boolean            @default(true) // true for required, false for bonus
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String

    @@index([jobPostingId])
}

// Normalized job skill requirements
model JobSkillRequirement {
    id            String            @id @default(cuid())
    isRequired    Boolean           @default(true) // true for required, false for bonus
    minimumLevel  ProficiencyLevel? // Minimum proficiency required
    yearsRequired Float? // Years of experience required
    priority      Int               @default(1) // 1 = high, 2 = medium, 3 = low
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId      String
    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String

    @@unique([skillId, jobPostingId])
    @@index([jobPostingId])
    @@index([skillId])
}

// Normalized education requirements
model EducationRequirement {
    id          String         @id @default(cuid())
    level       EducationLevel
    field       String? // Field of study (e.g., "Computer Science")
    description String? // Additional details
    isRequired  Boolean        @default(true) // true for required, false for bonus
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String

    @@index([jobPostingId])
}

model ChatMessage {
    id        String      @id @default(cuid())
    role      MessageRole
    content   String      @db.Text
    createdAt DateTime    @default(now())
    metadata  Json? // For storing additional metadata (e.g., agent info, tool calls)

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    // For conversation threading
    conversationId String?

    @@index([userId])
    @@index([conversationId])
}

model Document {
    id        String   @id @default(cuid())
    title     String // Auto-generated based on content or user input
    content   String // Stores the full extracted text of the document
    type      String // e.g., 'resume', 'cover_letter', 'article', 'blog_post', etc.
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model WorkHistory {
    id          String    @id @default(cuid())
    companyName String
    jobTitle    String
    startDate   DateTime
    endDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    achievements WorkAchievement[]
    userSkills   UserSkill[]

    @@index([userId])
}

model WorkAchievement {
    id          String   @id @default(cuid())
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    workHistory   WorkHistory @relation(fields: [workHistoryId], references: [id], onDelete: Cascade)
    workHistoryId String

    @@index([workHistoryId])
}

model Education {
    id               String        @id @default(cuid())
    type             EducationType
    institutionName  String
    degreeOrCertName String? // e.g., "B.S. Computer Science", "CompTIA A+"
    description      String // For additional details
    dateCompleted    DateTime?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model KeyAchievement {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model UserDetail {
    id        String             @id @default(cuid())
    category  UserDetailCategory
    content   String
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([userId])
}

model JobPosting {
    id        String   @id @default(cuid())
    title     String
    content   String   @db.Text // Changed from description to content, using Text for longer content
    company   String
    location  String
    industry  String? // New field for industry
    url       String?
    status    String?
    notes     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                 String
    details                JobPostingDetails?
    experienceRequirements ExperienceRequirement[]
    skillRequirements      JobSkillRequirement[]
    educationRequirements  EducationRequirement[]

    @@index([userId])
}

model JobPostingDetails {
    id String @id @default(cuid())

    // Structured requirements for compatibility analysis
    technicalSkills        String[] // Technical skills, languages, frameworks, tools
    softSkills             String[] // Communication, leadership, teamwork, etc.
    educationRequirements  String[] // Education, certifications, degrees, field of study
    experienceRequirements Json[] // Array of objects with years, description, category
    industryKnowledge      String[] // Industry-specific knowledge and expertise

    // Bonus/preferred structured requirements  
    bonusTechnicalSkills        String[] // Preferred technical skills
    bonusSoftSkills             String[] // Preferred soft skills
    bonusEducationRequirements  String[] // Preferred education and certifications
    bonusExperienceRequirements Json[] // Preferred experience requirements
    bonusIndustryKnowledge      String[] // Preferred industry knowledge

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
    jobPostingId String     @unique

    @@index([jobPostingId])
}
